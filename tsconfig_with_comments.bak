/* Visit https://aka.ms/tsconfig to read more about this file */
{
  "extends": "@tsconfig/node23/tsconfig.json",
  "compilerOptions": {
    "target": "ESNext" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
    "module": "ESNext" /* Specify what module code is generated. */,
    "moduleResolution": "bundler" /* Specify how TypeScript looks up a file from a given module specifier. */,
    "types": [
      "@types/node",
      "vite/client"
    ] /* Specify type package names to be included without being referenced in a source file. */,
    "lib": [
      "ESNext",
      "DOM",
      "DOM.Iterable"
    ] /* Specify a set of bundled library declaration files that describe the target runtime environment. */,
    "moduleDetection": "force" /* Control what method is used to detect module-format JS files. */,
    "noUncheckedSideEffectImports": true /* Check side effect imports. */,
    "allowJs": false /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */,
    // "checkJs": false /* Enable error reporting in type-checked JavaScript files. */,
    "noEmit": true /* Disable emitting files from a compilation. */,
    "allowImportingTsExtensions": true /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */,
    "allowSyntheticDefaultImports": true /* Allow 'import x from y' when a module doesn't have a default export. */,
    "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,
    "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,
    "strict": true /* Enable all strict type-checking options. */,
    "isolatedModules": true /* Ensure that each file can be safely transpiled without relying on other imports. */,
    "verbatimModuleSyntax": true /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */,
    "removeComments": true /* Disable emitting comments. */,
    // "experimentalDecorators": false /* Enable experimental support for legacy experimental decorators. */,
    "useDefineForClassFields": true /* Emit ECMAScript-standard-compliant class fields. */,
    "noImplicitAny": true /* Enable error reporting for expressions and declarations with an implied 'any' type. */,
    "noFallthroughCasesInSwitch": true /* Enable error reporting for fallthrough cases in switch statements. */,
    "strictNullChecks": true /* When type checking, take into account 'null' and 'undefined'. */,
    "strictFunctionTypes": true /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */,
    "strictBindCallApply": true /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */,
    "strictPropertyInitialization": true /* Check for class properties that are declared but not set in the constructor. */,
    "noImplicitThis": true /* Enable error reporting when 'this' is given the type 'any'. */,
    "noUnusedLocals": true /* Enable error reporting when local variables aren't read. */,
    "noUnusedParameters": true /* Raise an error when a function parameter isn't read. */,
    "skipLibCheck": true /* Skip type checking all .d.ts files. */,
    "baseUrl": "./" /* Specify the base directory to resolve non-relative module names. */,
    "paths": {
      "/": ["public"]
      //"@component/*": ["../src/ui/*"]
    } /* Specify a set of entries that re-map imports to additional lookup locations. */,
    "rootDir": "./" /* Specify the root folder within your source files. */,
    "outDir": "./build" /* Specify an output folder for all emitted files. */
  },
  "exclude": ["node_modules"],
  "include": ["src/**/*", "./*.js", "./*.mjs", "./*.ts"]
}
